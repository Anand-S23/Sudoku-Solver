[{"W:\\Sudoku-Solver\\src\\src\\index.js":"1","W:\\Sudoku-Solver\\src\\src\\App.js":"2","W:\\Sudoku-Solver\\src\\src\\components\\Board.js":"3","W:\\Sudoku-Solver\\src\\src\\lib\\sudoku.js":"4","W:\\Sudoku-Solver\\src\\src\\components\\Cell.js":"5"},{"size":218,"mtime":1610212999626,"results":"6","hashOfConfig":"7"},{"size":827,"mtime":1610220228045,"results":"8","hashOfConfig":"7"},{"size":742,"mtime":1610219235103,"results":"9","hashOfConfig":"7"},{"size":3729,"mtime":1610245272797,"results":"10","hashOfConfig":"7"},{"size":590,"mtime":1610236111358,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"13fldjm",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"W:\\Sudoku-Solver\\src\\src\\index.js",[],["24","25"],"W:\\Sudoku-Solver\\src\\src\\App.js",[],"W:\\Sudoku-Solver\\src\\src\\components\\Board.js",[],"W:\\Sudoku-Solver\\src\\src\\lib\\sudoku.js",["26","27","28","29"],"function generateEmptySudoku() {\r\n    const result = {\r\n        rows: []\r\n    };\r\n\r\n    for (let i = 0; i < 9; ++i) {\r\n        const row = { cols: [], index: i };\r\n\r\n        for (let j = 0; j < 9; j++) {\r\n            const col = { value: null, row: i, col: j };\r\n            row.cols.push(col);\r\n        }\r\n    \r\n        result.rows.push(row);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction updateSudoku(current_sudoku, e) {\r\n    current_sudoku.rows[e.row].cols[e.col].value = e.value;\r\n    return current_sudoku;\r\n}\r\n\r\nfunction checkValid(sudoku){\r\n    // check if there are repeating values in row\r\n    for (let n = 0; n < 9; ++n) {\r\n        for (let i = 0; i < 9; ++i) {\r\n            const val = sudoku.rows[n].cols[i].value;\r\n            if (val != null) {\r\n                for (let j = i + 1; j < 9; ++j) { \r\n                    if (val === sudoku.rows[n].cols[j].value)\r\n                    {\r\n                        console.log(\"row\", val, sudoku.rows[n].cols[j].value);\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // check if there are repeating values in column\r\n    for (let n = 0; n < 9; ++n) {\r\n        for (let i = 0; i < 9; ++i) {\r\n            const val = sudoku.rows[i].cols[n].value;\r\n            if (val != null) {\r\n                for (let j = i + 1; j < 9; ++j) { \r\n                    if (val === sudoku.rows[j].cols[n].value)\r\n                    {\r\n                        console.log(\"col\", val, sudoku.rows[j].cols[n].value);\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // check if there is a repeating a value in a square\r\n    for (let i = 0; i < 9; i += 3) {\r\n        for (let j = 0; j < 9; j += 3) {\r\n            const check_duplicates = [];\r\n            for (let y = i; y < i + 3; ++y) {\r\n                for (let x = j; x < j + 3; ++x) {\r\n                    const current_val = sudoku.rows[x].cols[y].value;\r\n                    if (check_duplicates.includes(current_val)) {\r\n                        return false;\r\n                    } else if (current_val !== null) {\r\n                        check_duplicates.push(current_val);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return true\r\n}\r\n\r\nfunction possible(sudoku, x, y, n) {\r\n    for (let i = 0; i < 9; ++i) {\r\n        if (sudoku.rows[y].cols[i].value == n) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < 9; ++i) {\r\n        if (sudoku.rows[i].cols[x].value == n) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    const x0 = Math.floor(x / 3) * 3;\r\n    const y0 = Math.floor(y / 3) * 3;\r\n    for (let i = 0; i < 3; ++i) {\r\n        for (let j = 0; j < 3; ++j) {\r\n            if (sudoku.rows[y0+i].cols[x0+j].value == n) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction solveSudoku(sudoku) {\r\n    if (checkValid(sudoku)) {\r\n        /*\r\n        for (let i = 0; i < 9; ++i) {\r\n            for (let j = 0; j < 9; ++j) {\r\n                if (sudoku.rows[i].cols[j].value === null) {\r\n                    for (let n = 1; n < 10; ++n) {\r\n                        if (possible(sudoku, i, j, n)) {\r\n                            sudoku.rows[i].cols[j].value = n;\r\n                            solveSudoku(sudoku);\r\n                        } else {\r\n                            console.log(i, j, n);\r\n                        }\r\n                    }\r\n                    return;\r\n                }\r\n            }\r\n        //}\r\n        */\r\n    } else { \r\n        alert(\"Sudoku is not valid\");\r\n    }\r\n\r\n    return sudoku;\r\n}\r\n\r\nexport { generateEmptySudoku, updateSudoku, solveSudoku };\r\n","W:\\Sudoku-Solver\\src\\src\\components\\Cell.js",[],{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":78,"column":10,"nodeType":"36","messageId":"37","endLine":78,"endColumn":18},{"ruleId":"38","severity":1,"message":"39","line":80,"column":42,"nodeType":"40","messageId":"41","endLine":80,"endColumn":44},{"ruleId":"38","severity":1,"message":"39","line":86,"column":42,"nodeType":"40","messageId":"41","endLine":86,"endColumn":44},{"ruleId":"38","severity":1,"message":"39","line":95,"column":52,"nodeType":"40","messageId":"41","endLine":95,"endColumn":54},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"no-unused-vars","'possible' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]